" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'golang', 'php', 'ruby', 'shell', 'markdown', 'html', 'css', 'less', 'coffeescript', 'tmux', 'json', 'beta']
    let g:bundle_groups=['cpp', 'python', 'tmux',]
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------
"

call plug#begin('~/.vim/bundle')
" preview
Plug 'skywind3000/vim-preview'
" gtags
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
" enable gtags module
let g:gutentags_modules = ['ctags', 'gtags_cscope']

" config project root markers.
let g:gutentags_project_root = ['.root', '.project', '.svn', '.git']

" generate datebases in my cache directory, prevent gtags files polluting my project
let g:gutentags_cache_dir = expand('~/.cache/tags')

" forbid gutentags adding gtags databases
let g:gutentags_auto_add_gtags_cscope = 0
let g:gutentags_define_advanced_commands = 1


" REPL
if has('vim') && v:version >= 800
Plug 'sillybun/vim-repl'
    map <m-r> :REPLToggle<CR>
    let g:repl_program = {
                \	"python": "python",
                \	"default": "bash"
                \	}
endif

" syntastic
" 语法检查，高亮错误位置，k-vim中使用<leader>s打开错误列表，<leader>sn到下一个
" 错误, <leader>sp到上一个错误
if v:version < 800
    Plug 'scrooloose/syntastic'
else
    Plug 'w0rp/ale', {'for': ['python', 'cpp']}
endif


"errormarker
Plug 'mh21/errormarker.vim'

Plug 'Shougo/echodoc.vim'
let g:echodoc#enable_at_startup = 1 

" 自动检查乱码文件的编码
" 使用方法:
"     - FencAutoDetect
"       自动识别文件编码
"     - FencView
"       选择指定编码reload文件
Plug 'adah1972/fencview'
noremap <m-f> :FencAutoDetect<cr>
set fileencodings=utf-8,gb2312,ucs-bom,euc-cn,euc-tw,gb18030,gbk,cp936

if has('mac')
    " Dash.vim
    " :Dash 'keyword' 快速打开Dash并查找api
    " 比如`:Dash cpp:unordered_map`
    Plug 'rizzatti/dash.vim'
endif

" asyncrun.vim
" 在后台异步执行， 通过: `cw` 进入quickfix窗口查看结果
" 异步git push：AsyncRun git push origin master异步编译：AsyncRun gcc % -o %<异步更新 tag：AsyncRun ctags -R --fields=+S .异步 grep：AsyncRun grep -R <cword> .
Plug 'skywind3000/asyncrun.vim'

" 一键格式化代码
Plug 'Chiel92/vim-autoformat'
nnoremap <F7> :Autoformat<CR>

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
" 加入新的代码片段的快捷键<leader>us
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" 代码自动补全
" 迄今为止用到的最好的自动VIM自动补全插件
" 重启 :YcmRestartServer
Plug 'Valloric/YouCompleteMe', {'on': []}
augroup load_ycm
    autocmd!
    autocmd InsertEnter * call plug#load('YouCompleteMe') | autocmd! load_ycm
augroup END
" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }

" quick edit
" 快速注释
" <leader>cc 加注释
" <leader>cu 解开注释
" <leader>c<space>  加上/解开注释, 智能判断
" <leader>cy   先复制, 再注解(p可以进行黏贴)
Plug 'scrooloose/nerdcommenter'

" 快速加入修改环绕字符
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
Plug 'bronson/vim-trailing-whitespace'
" easyalign
" 快速赋值语句对齐
" 首先在visual模式下选中文本，然后输入ga接上对其依据，比如`=`
" vipga=选中段落对齐
" gaip=`=`第一次出现位置为依据 gaip2=`=`第二次出现位置为依据 gaip*= 所有等号都
" 对齐
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" quick movement
" easymotion
"更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'Lokaltog/vim-easymotion'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

Plug 'vim-scripts/matchit.zip'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'

" quick selection and edit
" expandregion
" 选中区块
Plug 'terryma/vim-expand-region'
" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" quick locate file or function
" 文件搜索
" 使用leaderF替代ctrlp
" <c-p> 搜索当前文件及其子文件夹下的文件
" <c-n> 搜索最近打开的文件
" <m-p> 在当前文件的函数列表里搜索
" <m-n>列出buffers 
Plug 'Yggdroot/LeaderF'
" ctrlsf
"  `\` 搜索当前光标下的单词
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'
" incsearch
" Plug 'haya14busa/incsearch.vim'
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)

" git
" fugitive
" Plug 'tpope/vim-fugitive'
" gitgutter
" signify, 左侧显示git状态，以及可以对比文件改变
Plug 'mhinz/vim-signify', {'on': 'SignifyToggle'}
" Plug 'airblade/vim-gitgutter', {'on': 'GitGutterToggle'}

" gundo only support python2.x
" edit history, 可以查看回到某个历史状态
" Plug 'sjl/gundo.vim', {'on': 'GundoToggle'}

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'
" 主题 solarized
" solarized
Plug 'altercation/vim-colors-solarized'

" nav
" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs' 
" ctrlspace
" Plug 'vim-ctrlspace/vim-ctrlspace', {'on': 'CtrlSpace'}

" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'

if count(g:bundle_groups, 'cpp')
    " Add maktaba and bazel to the runtimepath.
    " " (The latter must be installed before it can be used.)
    Plug 'google/vim-maktaba', {'for': 'cpp'}
    Plug 'bazelbuild/vim-bazel', {'for': 'cpp'}
    Plug 'rdnetto/YCM-Generator', {'for': 'cpp'}

    Plug 'derekwyatt/vim-fswitch', {'for': 'cpp'}
    nmap <silent> <Leader>sh :FSHere<cr>

endif

if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    " 可以使用ctrl+jkhl统一跳转tmux和vim pannel
    Plug 'christoomey/vim-tmux-navigator'
endif

if count(g:bundle_groups, 'markdown')
    Plug 'plasticboy/vim-markdown', {'for': 'md'}
    " https://github.com/suan/vim-instant-markdown
    " npm -g install instant-markdown-d
    Plug 'suan/vim-instant-markdown', {'for': 'md'}
    let g:instant_markdown_slow = 1
    let g:instant_markdown_autostart = 0
    map <F12> :InstantMarkdownPreview<CR>
endif


if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax', {'for': 'python'}
    Plug 'hynek/vim-python-pep8-indent', {'for': 'python'}
    " Plug 'Glench/Vim-Jinja2-Syntax'

    " isort  https://github.com/timothycrosley/isort#readme + https://github.com/fisadev/vim-isort#installation
    " pip install isort
    Plug 'fisadev/vim-isort'
    let g:ale_python_isort_executable = 'isort'
    let g:ale_python_isort_use_global = 1
    " Shift-V 上下选中, ,i 规范化
    let g:vim_isort_map = '<c-i>'
    let g:vim_isort_python_version = 'python3'
endif



if count(g:bundle_groups, 'json')
    " json
    Plug 'elzr/vim-json', {'for': 'json'}
endif




" Add plugins to &runtimepath
call plug#end()


" ################### 基础 ######################
" ale {{{
if has_key(g:plugs, 'ale')
    let g:ale_linters_explicit = 1
    let g:ale_completion_delay = 500
    let g:ale_echo_delay = 20
    let g:ale_lint_delay = 500
    let g:ale_echo_msg_format = '[%linter%] %code: %%s'
    let g:ale_lint_on_text_changed = 'normal'
    let g:ale_lint_on_insert_leave = 1
    let g:airline#extensions#ale#enabled = 1

    " pip install flake8
    if has('mac')
        let g:clang_library_path = '/usr/local/Cellar/llvm/3.6.2/lib/libclang.dylib'
    else
        let g:clang_library_path = '/usr/lib/llvm-3.8/lib/libclang.so.1'
    endif

    let g:ale_linters = {
                \   'python': ['flake8'],
                \   'javascript': ['eslint'],
                \}

    " E501 -> 120 chars
    let g:ale_python_flake8_args="--ignore=E114,E116,E131 --max-line-length=120"
    " --ignore=E225,E124,E712,E116

    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '>'

    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

    " troggle quickfix list
    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            lopen
        endif
    endfunction
    nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
    nmap <silent> <Leader>en <Plug>(ale_next_wrap)
    nnoremap <silent> <Leader>ec :ALEToggle<CR>
    nnoremap <Leader>s :call ToggleErrors()<cr>

    let g:ale_set_highlights = 1
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
endif

" }}}

" syntastic {{{
if has_key(g:plugs, 'syntastic')
    " dependence
    " 1. shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck

    let g:syntastic_error_symbol='>>'
    let g:syntastic_warning_symbol='>'
    let g:syntastic_check_on_open=1
    let g:syntastic_check_on_wq=0
    let g:syntastic_enable_highlighting=1

    " checkers
    " python
    " pip install flake8
    let g:syntastic_python_checkers=['flake8', ] " 使用pyflakes,速度比pylint快
    let g:syntastic_python_flake8_args='--ignore=E501,E225,E124,E712,E116,E131'

    " javascript
    " let g:syntastic_javascript_checkers = ['jsl', 'jshint']
    " let g:syntastic_html_checkers=['tidy', 'jshint']
    " npm install -g eslint eslint-plugin-standard eslint-plugin-promise eslint-config-standard
    " npm install -g eslint-plugin-import eslint-plugin-node eslint-plugin-html babel-eslint
    let g:syntastic_javascript_checkers = ['eslint']

    " to see error location list
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_enable_signs = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_auto_jump = 0
    let g:syntastic_loc_list_height = 5

    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            Errors
        endif
    endfunction
    nnoremap <Leader>s :call ToggleErrors()<cr>

    " ,en ,ep to jump between errors
    function! <SID>LocationPrevious()
        try
            lprev
        catch /^Vim\%((\a\+)\)\=:E553/
            llast
        endtry
    endfunction

    function! <SID>LocationNext()
        try
            lnext
        catch /^Vim\%((\a\+)\)\=:E553/
            lfirst
        endtry
    endfunction

    nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
    nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
    nmap <silent> <Leader>ep    <Plug>LocationPrevious
    nmap <silent> <Leader>en    <Plug>LocationNext

    " 修改高亮的背景色, 适应主题
    highlight SyntasticErrorSign guifg=white guibg=black

    " 禁止插件检查java
    " thanks to @marsqing, see https://github.com/wklken/k-vim/issues/164
    let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }

    " 关闭syntastic语法检查, 鼠标复制代码时用到, 防止把错误标志给复制了
    nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
endif
" }}}



" ################### 自动补全 ###################
" YouCompleteMe {{{
"youcompleteme  默认tab  s-tab 和自动补全冲突
"let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
" 触发语义补全
let g:ycm_key_invoke_completion = '<c-space>'
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
" 自动补全配置
" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
" set completeopt=longest,menu
set completeopt=menu,menuone
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_show_diagnostics_ui = 0
" load ycm conf by default
let g:ycm_confirm_extra_conf=0
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
"" 触发基于符号的补全
let g:ycm_min_num_of_chars_for_completion=2
"" don't cache completion items
let g:ycm_cache_omnifunc=0
"" turn on tag completion
let g:ycm_collect_identifiers_from_tags_files = 1
" 开启语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
" 回车作为选中
let g:ycm_key_list_stop_completion = ['<CR>']

" let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开

" 跳转到定义处, 分屏打开
let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_register_as_syntastic_checker = 0
" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" old version
if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
endif
" new version
if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
endif

" 直接触发自动补全 insert模式下
" let g:ycm_key_invoke_completion = '<C-Space>'
" 黑名单,不启用
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'gitcommit' : 1,
            \}
" }}}


" ultisnips {{{
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>

" ctrl+j/k 进行选择
func! g:JInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
    endif
endfunction

func! g:KInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
    endif
endfunction
inoremap <c-j> <c-r>=g:JInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}


" delimitMate {{{
" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0
au FileType txt let b:delimitMate_autoclose = 0
" }}}


" closetag {{{
let g:closetag_html_style=1
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
let g:NERDSpaceDelims=1
let g:NERDAltDelims_python = 1
" }}}

" trailingwhitespace {{{
map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" Default:
" If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}

" ################### 快速移动 ###################

" easymotion {{{
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}


" quickscope {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" macvim/gvim会有问题, 暂时注解
" let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
" let g:qs_first_occurrence_highlight_color = 155       " terminal vim
" let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
" let g:qs_second_occurrence_highlight_color = 81         " terminal vim
" }}}

" ################### 快速选中 ###################

" expandregion {{{
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" Extend the global default
if exists("*expand_region#custom_text_objects")
    call expand_region#custom_text_objects({
                \ 'a]' :1,
                \ 'ab' :1,
                \ 'aB' :1,
                \ 'ii' :0,
                \ 'ai' :0,
                \ })
endif

" }}}

" multiplecursors {{{
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlF {{{


let g:Lf_NormalMap = {
	\ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>']],
	\ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>']],
	\ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
	\ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
	\ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>']],
	\ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
	\ }

let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
map <C-p> :LeaderfFile<CR>
map <C-n> :LeaderfMru<CR>
map <m-p> :LeaderfFunction<CR>
map <m-n> :LeaderfBuffer<CR>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0, 'Colorscheme':1}
let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git','.hg'],
            \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
            \}
let g:Lf_MruFileExclude = ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
let g:Lf_DefaultExternalTool = 'ag'
let g:Lf_RootMarkers = ['.git', '.hg', '.svn', '.project', '.root']

" }}}


" ctrlsf {{{
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
            \ "open"  : "<Space>",
            \ "openb" : "O",
            \ "tab"   : "t",
            \ "tabb"  : "T",
            \ "prevw" : "p",
            \ "quit"  : "q",
            \ "next"  : "<C-J>",
            \ "prev"  : "<C-K>",
            \ "pquit" : "q",
            \ }
" }}}

" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作

" signify {{{
let g:signify_vcs_list = [ 'git']
nnoremap <m-g> :SignifyToggle<CR>
nnoremap <m-d> :SignifyDiff<CR>
" }}}

" gitgutter {{{
" 同git diff,实时展示文件中修改的行
" 只是不喜欢除了行号多一列, 默认关闭,gs时打开
" let g:gitgutter_map_keys = 0
" let g:gitgutter_enabled = 0
" let g:gitgutter_highlight_lines = 1
" nnoremap <leader>gs :GitGutterToggle<CR>
" }}}

" gundo {{{
" reset到历史状态 only support python2.x
" noremap <leader>h :GundoToggle<CR>
" }}}

" ################### 显示增强 ###################

" airline {{{
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
" 是否打开tabline
let g:airline#extensions#tabline#enabled = 0
" }}}



" rainbow_parentheses {{{
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }}}


" ################### 显示增强-主题 ###################"

" solarized {{{
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
" let g:solarized_termcolors=256
" }}}

" molokai {{{
" monokai原始背景色
let g:molokai_original = 1
let g:rehash256 = 1
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'


" nerdtreetabs
" map <m-t> :NERDTreeToggle<CR>
map <m-t> :NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
" 是否自动开启nerdtree
" thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_open_on_gui_startup=0
" }}}

" ################### 语言相关 ###################



" pythonsyntax {{{
let python_highlight_all = 1
" }}}

" piv {{{
let g:DisableAutoPHPFolding = 1
" }}}


"  gtags
let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/local/share/gtags/gtags.conf'

" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行
" let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

let g:gutentags_plus_nomap = 1
" 找symbol
noremap <silent> <m-j>s :GscopeFind s <C-R><C-W><cr>
" 找定义
noremap <silent> <m-j>g :GscopeFind g <C-R><C-W><cr>
" 找到调用当前函数的所有函数
noremap <silent> <m-j>c :GscopeFind c <C-R><C-W><cr>
" 找到当前textstring
noremap <silent> <m-j>t :GscopeFind t <C-R><C-W><cr>
" 从egrep找
noremap <silent> <m-j>e :GscopeFind e <C-R><C-W><cr>
" 找当前文件
noremap <silent> <m-j>f :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
" 找到include当前文件的所有文件
noremap <silent> <m-j>i :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
" 找到被当前函数调用的函数
noremap <silent> <m-j>d :GscopeFind d <C-R><C-W><cr>
" 找到当前symbol被赋值的位置
noremap <silent> <m-j>a :GscopeFind a <C-R><C-W><cr>

" vim-preview {{{
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>
noremap <F3> :PreviewSignature!<cr>
inoremap <F3> <c-\><c-o>:PreviewSignature!<cr>
" }}}
"
" vim-asyncrun {{{
" 自动打开 quickfix window ，高度为 6
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>
let g:asyncrun_open = 6

" 任务结束时候响铃提醒
let g:asyncrun_bell = 1
" <F9>编译
nnoremap <silent> <F9> :AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" nnoremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
nnoremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) python "$(VIM_FILEPATH)"<CR>
" nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>
" nnoremap <silent> <F6> :AsyncRun -cwd=<root> -raw make test <cr>
" nnoremap <silent> <F4> :AsyncRun -cwd=<root> cmake . <cr>

" }}}
"
" vim-dirvish {{{
" noremap <silent><buffer> ~ :Dirvish ~<cr>
" }}}
